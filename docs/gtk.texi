\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename gtk
@settitle GTK
@setchapternewpage odd
@c %**end of header

@set edition 1.0
@set update-date 16 May 1996
@set update-month May 1996

@ifinfo
This file documents GTK, the General Toolkit

Copyright (C) 1996 Peter Mattis

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies

@ignore
Permission is granted to process this file throught TeX and print the
results, provided the printed document carries copying permission notice
identical to this one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by Peter Mattis.
@end ifinfo

@titlepage
@title The General Toolkit
@subtitle Version 1.0
@subtitle @value{update-month}
@author by Peter Mattis

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1996 Peter Mattis

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
 
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
 
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by Peter Mattis.
@end titlepage

@node Top, Copying, (dir), (dir)
@top The General Toolkit
@ifinfo
This is edition @value{edition} of the GTK documentation,
@w{@value{update-date}}.
@end ifinfo

@menu
* Copying::                     Your rights.
* Overview::                    What is GTK?
* Initialization::              Initialization and exit.
* Widgets::                     Widget overview.
* Containers::                  Container overview.
* Styles::                      Style overview.
* Data and Observers::          Data and observer overview.
* Timeouts::                    Using timers.
* Accelerators::                Using key accelerators.
* Grabs::                       Grabbing events.
* Alignments::                  Creating alignment containers.
* Boxes::                       Creating box containers.
* Buttons::                     Creating buttons.
* Drawing Areas::               Creating drawing areas.
* Frames::                      Creating frame containers.
* Lists and Listboxes::         Creating lists and listboxes.
* Menus::                       Creating menus.
* Labels::                      Creating labels, images and pixmaps.
* Rulers::                      Creating rulers.
* Scales::                      Creating scales.
* Scrolled Areas and Windows::  Creating scrolled areas and windows.
* Scrollbars::                  Creating scrollbars.
* Tables::                      Creating table containers.
* Text Entries::                Creating text entry fields.
* Windows::                     Creating windows.
* Examples::                    Using GTK.
* Function Index::              Index of functions.
* Concept Index::               Index of concepts.
@end menu

@node Copying, Overview, Top, Top
@comment node-name, next, previous, up
@chapter Copying

GTK is @dfn{free}; this means that everyone is free to use it and free
to redestribute it on a free basis. GTK is not in the public domain; it
is copyrighted and there are restrictions on its distribution, but
these restrictions are designed to permit everything that a good
cooperating citizen would want to do. What is not allowed is to try to
prevent others from further sharing any version of GTK that they might
get from you.

Specifically, we want to make sure that you have the right to give away
copies of GTK, that you receive source code or else can get it if you
want it, that you can change GTK or use pieces of it in new free
programs, and that you know you can do these things.

To make sure that everyone has such rights, we have to forbid you to
deprive anyone else of these rights. For example, if you distribute
copies of GTK, you must give the recipients all the rights that you
have. You must make sure that they, too, receive or can get the source
code. And you must tell them their rights.

Also, for my own protection, we must make certain that everyone finds
out that there is no warranty for GTK. If GTK is modified by someone
else and passed on, we want their recipients to know that what they have
is not what we distributed, so that any problems introduced by others
will no reflect on our reputation.

The precise conditions of the licenses for GTK are found in the General
Public Licenses that accompanies it.


@node Overview, Initialization, Copying, Top
@comment node-name, next, previous, up
@chapter What is GTK?
@cindex Overview

GTK is a library for creating user interfaces similar to the Motif ``look
and feel''. It is designed to be small and efficient, but still flexible
enough to allow the programmer freedom in the interfaces he/she
creates. GTK allows the programmer to use a variety of standard user
interface objects such as push, radio and check buttons, menus, lists and
frames. It also has several ``container'' objects which can be used to
control the layout of user interface elements such as horizontal and
vertical boxes and tables.


@node Initialization, Widgets, Overview, Top
@comment node-name, next, previous, up
@chapter Initialization and Exit
@cindex Initialization
@cindex Exit

Initializing GTK is easy. Simply call @code{gtk_init} passing in the
@var{argc} and @var{argv} parameters. Exit is similarly easy. Just call
@code{gdk_exit}. Note that @code{gtk_init} will call
@code{gdk_init}. Therefore, explicit initialization of GDK is not necessary
by the programmer.

@deftypefun void gtk_init (int *@var{argc}, char ***@var{argv})
Initialize the GTK library and has the side effect of initializing the GDK
library. The arguments @var{argc} and @var{argv} are scanned and any
arguments that GTK recognizes are handled and removed. The @var{argc} and
@var{argv} parameters are the values passed to @code{main} upon program
invocation. 
@end deftypefun

@deftypefun void gtk_exit (int @var{errorcode})
Exit GTK and perform any necessary cleanup. @code{gtk_exit} will call
@code{gdk_exit} when it is finished cleaning up the GTK internals. The
parameter @var{errorcode} will be passed to @code{gdk_exit}.
@end deftypefun

@example
int
main (int argc, char *argv[])
@{
  /* Initialize GTK. */
  gtk_init (&argc, &argv);

  /* Exit from GTK...this call will never return. */
  gtk_exit (0);

  /* Keep compiler from issuing a warning */
  return 0;
@}
@end example


@node Widgets, Containers, Initialization, Top
@comment node-name, next, previous, up
@chapter Widget Overview
@cindex Widgets

Widgets are the general term used by GTK for user interface objects. A
widget describes a certain interface that all user interface objects
conform to. This interface allows a uniform method for dealing with
operations common to all objects such as hiding and showing of an object.

The common interface that widgets must adhere to is described by the
GtkWidget and GtkWidgetFunctions structure. For the purposes of using GTK
these structures can be considered read-only and, for the most part,
opaque. (The few exceptions are the need to examine and use the ``type'',
``style'' and ``window'' fields on occasion).

All widget creation routines in GTK return pointers to GtkWidget
structs. In reality, all widget creation routines create structures that
can be viewed as equivalent to the GtkWidget structure, but often have
contain additional information.

The programmer can perform several operations with a widget. Either one of
the basic widget operations can be invoked or one of the widget specific
operations can be invoked. The basic widget operations are described below
while the widget specific operations are described later in the manual.

@deftypefun void gtk_widget_destroy (GtkWidget *@var{widget})
Destroys the specified widgets and any children it may have. All memory
associated with the widget is released.
@end deftypefun

@deftypefun void gtk_widget_show (GtkWidget *@var{widget})
Makes the specified widget visible. This has the effect of setting a flag
within the widget specifying it as visible and notifying the widget's parent
of its new state. If the parent is visible then sometime after this call
has been made the widget will be realized and mapped. Note: it is not safe
to assume the widget has been realized and mapped immediately following
this call. A visible widget participates in geometry management.
@end deftypefun

@deftypefun void gtk_widget_hide (GtkWidget *@var{widget})
Makes the specified widget invisible. This has the effect of unsetting a
flag within the widget specifying it as visible and notifying the widget's
parent of its new state. Sometime after this call has been made the widget
will be unmapped. An invisible widget does not participate in geometry
management. 
@end deftypefun

@deftypefun void gtk_widget_map (GtkWidget *@var{widget})
Maps a widget on screen. 
@end deftypefun

@deftypefun void gtk_widget_unmap (GtkWidget *@var{widget})
Unmaps a widget from the screen.
@end deftypefun

@deftypefun void gtk_widget_realize (GtkWidget *@var{widget})
Realizes a widgets window. Realization consists of creating a widgets
window and any other initialization needed before the widget is mapped. 
@end deftypefun

@deftypefun void gtk_widget_draw (GtkWidget *@var{widget}, GdkRectangle *@var{area}, gint @var{is_expose})
Draw the specified widget. The @var{area} and @var{is_expose} parameters
are used by widget event code when an expose event arrives. For the
purposes of redrawing a widget these parameters can take the values
``NULL'' and ``FALSE'' respectively.
@end deftypefun

@deftypefun void gtk_widget_draw_focus (GtkWidget *@var{widget})
Draw the specified widgets focus highlight. If the widget has the focus
then a 1 pixel wide highlight will be drawn around the widget. If the
widget does not have the focus then a 1 pixel widget highlight will be
drawn in the background color around the widget (effectively erasing any
previous highlight).
@end deftypefun

@deftypefun gint gtk_widget_event (GtkWidget *@var{widget}, GdkEvent *@var{event})
Send an event to a widget. 
@end deftypefun

@deftypefun void gtk_widget_size_request (GtkWidget *@var{widget}, GtkRequisition *@var{requisition})
Query a widget as to its desired size.
@end deftypefun

@deftypefun void gtk_widget_size_allocate (GtkWidget *@var{widget}, GtkAllocation *@var{allocation})
Allocate space for a widget.
@end deftypefun

@deftypefun gint gtk_widget_is_child (GtkWidget *@var{widget}, GtkWidget *@var{child})
Query a widget to determine if @var{child} is a child of @var{widget}. 
@end deftypefun

@deftypefun void gtk_widget_is_immediate_child (GtkWidget *@var{widget}, GtkWidget *@var{child})
Query a widget to determine if @var{child} is an immediate child of
@var{widget}. 
@end deftypefun

@deftypefun void gtk_widget_locate (GtkWidget *@var{widget}, GtkWidget **@var{child}, gint @var{x}, gint @var{y})
Locates the child widget located at position @var{x}, @var{y}. The child
widget is returned in the parameter @var{child}.
@end deftypefun

@deftypefun void gtk_widget_activate (GtkWidget *@var{widget})
Activate a widget.
@end deftypefun

@deftypefun void gtk_widget_set_state (GtkWidget *@var{widget}, GtkStateType @var{state})
Set a widgets state.
@end deftypefun

@deftypefun void gtk_widget_install_accelerator (GtkWidget *@var{widget}, gchar @var{accelerator_key}, guint8 @var{accelerator_mods}, gint @var{global})
Install a keyboard accelerator. When @var{accelerator_key} is invoked with
the modifier keys @var{accelerator_keys}, then the specified widget will be
``activated'' via @code{gtk_widget_activate}. (It therefore makes little
sense to add a keyboard accelerator for a widget which does not have an
activate routine). If the @var{global} flag is ``TRUE'' the accelerator
will be installed in the global accelerator table making it a valid
accelerator for any window. If the @var{global} flag is ``FALSE'' the
accelerator is installed in specified widgets toplevel window making it a
valid accelerator only when the pointer is in the toplevel window the
widget is in. Note: any existing accelerator using the combination of
@var{accelerator_key} and @var{accelerator_mods} will get removed.
@end deftypefun

@deftypefun void gtk_widget_remove_accelerator (GtkWidget *@var{widget}, gint @var{global})
Remove a keyboard accelerator.
@end deftypefun

@deftypefun void gtk_widget_grab_focus (GtkWidget *@var{widget})
Grab the focus for a widget.
@end deftypefun

@deftypefun gint gtk_widget_intersect (GtkWidget *@var{widget}, GdkRectangle *@var{area}, GdkRectangle *@var{dest})
Determine the intersection between a widget and the rectangle
@var{area}. The resulting intersection returned in @var{dest} is valid only
if @code{gtk_widget_intersect} returns ``TRUE''.
@end deftypefun

@deftypefun void gtk_widget_reparent (GtkWidget *@var{widget}, GtkWidget *@var{new_parent})
Change a widgets parent. 
@end deftypefun


@node Containers, Styles, Widgets, Top
@comment node-name, next, previous, up
@chapter Container Overview
@cindex Containers

@node Styles, Data and Observers, Containers, Top
@comment node-name, next, previous, up
@chapter Style Overview
@cindex Styles

@node Data and Observers, Timeouts, Styles, Top
@comment node-name, next, previous, up
@chapter Data and Observer Overview

@node Timeouts, Accelerators, Data and Observers, Top
@comment node-name, next, previous, up
@chapter Using timers
@cindex Timeouts

@node Accelerators, Grabs, Timeouts, Top
@comment node-name, next, previous, up
@chapter Using accelerators
@cindex Accelerators

@node Grabs, Alignments, Accelerators, Top
@comment node-name, next, previous, up
@chapter Grabbing events
@cindex Grabs

@node Alignments, Boxes, Grabs, Top
@comment node-name, next, previous, up
@chapter Creating Alignment Containers
@cindex Alignments

@node Boxes, Buttons, Alignments, Top
@comment node-name, next, previous, up
@chapter Creating Box Containers
@cindex Boxes

@node Buttons, Drawing Areas, Boxes, Top
@comment node-name, next, previous, up
@chapter Creating Buttons
@cindex Buttons

@node Drawing Areas, Frames, Buttons, Top
@comment node-name, next, previous, up
@chapter Creating Drawing Areas
@cindex Drawing Areas

@node Frames, Lists and Listboxes, Drawing Areas, Top
@comment node-name, next, previous, up
@chapter Creating Frame Containers
@cindex Frames

@node Lists and Listboxes, Menus, Frames, Top
@comment node-name, next, previous, up
@chapter Creating Lists and Listboxes
@cindex Lists
@cindex Listboxes

@node Menus, Labels, Lists and Listboxes, Top
@comment node-name, next, previous, up
@chapter Creating Menus
@cindex Menus
@cindex Menubars
@cindex Menuitems

@node Labels, Rulers, Menus, Top
@comment node-name, next, previous, up
@chapter Creating Labels, Images and Pixmaps
@cindex Labels
@cindex Images
@cindex Pixmaps

@node Rulers, Scales, Labels, Top
@comment node-name, next, previous, up
@chapter Creating Rulers
@cindex Rulers

@node Scales, Scrolled Areas and Windows, Rulers, Top
@comment node-name, next, previous, up
@chapter Creating Scales
@cindex Scales

@node Scrolled Areas and Windows, Scrollbars, Scales, Top
@comment node-name, next, previous, up
@chapter Creating Scrolled Areas and Windows
@cindex Scrolled Areas
@cindex Scrolled Windows

@node Scrollbars, Tables, Scrolled Areas and Windows, Top
@comment node-name, next, previous, up
@chapter Creating Scrollbars
@cindex Scrollbars

@node Tables, Text Entries, Scrollbars, Top
@comment node-name, next, previous, up
@chapter Creating Table Containers
@cindex Tables

@node Text Entries, Windows, Tables, Top
@comment node-name, next, previous, up
@chapter Creating Text Entry Fields
@cindex Text Entries

@node Windows, Examples, Text Entries, Top
@comment node-name, next, previous, up
@chapter Creating Windows
@cindex Windows


@node Examples, Function Index, Windows, Top
@comment node-name, next, previous, up
@chapter Examples


@node Function Index, Concept Index, Examples, Top
@comment node-name, next, previous, up
@unnumbered Function Index

@printindex fn


@node Concept Index, , Function Index, Top
@comment node-name, next, previous, up
@unnumbered Concept Index

@printindex cp


@summarycontents
@contents
@bye
